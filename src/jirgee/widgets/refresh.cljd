(ns jirgee.widgets.refresh
  (:require
   ["package:custom_refresh_indicator/custom_refresh_indicator.dart" :as refresh]
   ["package:flutter/material.dart" :as m]
   [cljd.flutter.alpha2 :as f]))

(defn ^m/Widget indicator-builder [^m/BuildContext context ^refresh/IndicatorController controller]
  (f/widget 
  (m/Icon m.Icons/accessibility
          .color m.Colors/black
          .size 30)))

(defn refreshable-list [child on-refresh]
  (f/widget
   :managed [controller (refresh/IndicatorController .refreshEnabled true)]
   :let [render-complate (atom false)]
   (refresh/CustomRefreshIndicator
    .leadingScrollIndicatorVisible true
    .trailingScrollIndicatorVisible false
    .triggerMode (.anywhere refresh/IndicatorTriggerMode)
    .trigger refresh.IndicatorTrigger/bothEdges
    .controller controller
    .onStateChanged (fn [c]
                      (cond
                        (.didChange c .to (.-complete refresh/IndicatorState))
                        (reset! render-complate true)

                        (.didChange c .to (.-idle refresh/IndicatorState))
                        (reset! render-complate false)))
    .builder
    (fn [_ child _]
      (m/Stack 
       .children 
       [(m/AnimatedBuilder
         .builder
         (fn [context _]
           (m/Container
            .alignment m.Alignment/center
            .width (* 150 (.-value controller))
            .child
            (m/OverflowBox
             .maxHeight 40
             .minHeight 40
             .maxWidth 40
             .minWidth 40
             .alignment m.Alignment/center
             .child
             (m/AnimatedContainer
              .duration (Duration .milliseconds 150)
              .alignment m.Alignment/center
              .child (if (true? @render-complate)
                       (m/Icon (.-check m/Icons) .color (.-white m/Colors))
                       (m/SizedBox .height 30
                                   .width 30
                                   .child (m/CircularProgressIndicator
                                           .strokeWidth 2
                                           .valueColor (m/AlwaysStoppedAnimation m.Colors/white)
                                           .value (if (or (.-isDragging controller) (.-isArmed controller))
                                                    (.clamp (.-value controller) 0.0 1.0)
                                                    nil))))
              .decoration (m/BoxDecoration
                           .color (if (true? @render-complate)
                                    m.Colors/greenAccent
                                    m.Colors/black)
                           .shape m.BoxShape/circle)))))
         .animation controller)
        (m/AnimatedBuilder
         .builder (fn [context _]
                    (m.Transform/translate
                     .offset (m/Offset (* 150 (.-value controller)) 0.0)
                     .child child))
         .animation controller)]))
    .onRefresh
    on-refresh
    .child child)))