(ns jirgee.widgets.tweet-card
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:timeago/timeago.dart" :as timeago]
   ["package:flutter_svg/svg.dart" :as svg]
   ["package:like_button/like_button.dart" :as like-button]
   [cljd.flutter.alpha2 :as f]
   [jirgee.widgets.hashtag-text :as hashtag]
   [jirgee.widgets.carousel-image :as c-img]
   [jirgee.widgets.tweet-icon-button :as icon-button]
   [jirgee.services.tweet :as tweet-service]
   [jirgee.common.theme :as theme]
   [jirgee.states.global :as gs]
   [jirgee.services.user :as user-service]))

(defn card [tweet]
  (let [userinfo (get @gs/state :user-info)]
    (if (empty? userinfo)
      (m/SizedBox)
      (f/widget
       :context ctx
       :get [m/Navigator]
       (m/GestureDetector
        .onTap (fn []
                 (let [t (:tweet @gs/state)]
                   (when (or (empty? t) (not= (get t "id") (get tweet "id"))
                             (not= "/reply_tweet" (-> m/ModalRoute (.of ctx) .-settings .-name)))
                     (swap! gs/state assoc :tweet tweet)
                     (.pushNamed navigator "/reply_tweet")))
                 nil))
       (m/Row
        .children
        [(m/Column
          .crossAxisAlignment m.CrossAxisAlignment/start
          .children
          [(m/Container
            .margin (.all m/EdgeInsets 10)
            .child (m/GestureDetector
                    .onTap (fn []
                             (swap! gs/state assoc-in [:user :id] (get tweet "user_id"))
                             (user-service/user-profile ctx navigator {"user_id" (get tweet "user_id")})
                             (.pushNamed navigator "/user_profile")
                             nil)
                    .child (m/CircleAvatar .backgroundImage
                                           (if (empty? (get tweet "profile_image_url"))
                                             (m/AssetImage "assets/images/pexels-landon-parenteau-6946663.jpg")
                                             (m/NetworkImage (get tweet "profile_image_url")))
                                           .radius 35)))
           (m/Expanded
            .child
            (m/Row
             .crossAxisAlignment m.CrossAxisAlignment/start
             .children
             [(if (empty? (get tweet "retweeted"))
                (m/SizedBox)
                (m/Column
                 .children
                 [(.asset svg/SvgPicture
                          "assets/svgs/retweet.svg"
                          .color theme/grey-color
                          .height 20)
                  (m/SizedBox .height 2)
                  (mgl/MongolText (str (get tweet "screen_name") " retweeted")
                                  .style (m/TextStyle .color theme/grey-color
                                                      .fontSize 16
                                                      .fontWeight m.FontWeight/w500))]))
              
                (m/Column
                 .children
                 [(m/Container .margin (.only m/EdgeInsets .right 5)
                               .child (mgl/MongolText (if (empty? (get tweet "retweeted"))
                                                        (get tweet "screen_name")
                                                        (-> (get tweet "retweeted")
                                                            last (get "screen_name")))
                                                      .style
                                                      (m/TextStyle .fontWeight m.FontWeight/bold
                                                                   .fontSize 19)))
                  (m/SizedBox .height 10)
                  (m/Container .margin (.only m/EdgeInsets .right 5)
                               .child
                               (mgl/MongolText (timeago/format (DateTime/parse (if (empty? (get tweet "retweeted"))
                                                                                 (get tweet "created_at")
                                                                                 (-> (get tweet "retweeted")
                                                                                     last (get "created_at")))) .locale "mn_my")
                                               .style (m/TextStyle .color theme/grey-color .fontSize 17)))])
              
              (if (empty? (get tweet "replied_to"))
                (m/SizedBox)
                (mgl/MongolRichText
                 .text (m/TextSpan
                        .text "Replying to"
                        .style (m/TextStyle .color theme/grey-color .fontSize 16)
                        .children [(m/TextSpan .text (str " @" (get tweet "replied_to"))
                                               .style
                                               (m/TextStyle .color theme/blue-color
                                                            .fontSize 16))])))
              (if (empty? (get tweet "content"))
                (if (empty? (get tweet "retweeted"))
                  (m/SizedBox)
                  (hashtag/hashtag-text (-> (get tweet "retweeted")
                                            last
                                            (get "content"))))
                (hashtag/hashtag-text (get tweet "content")))
              (if (empty? (get tweet "media_links"))
                (m/SizedBox)
                (let [^#/(List String) links (get tweet "media_links")]
                  (c-img/view links)))
              ;; (if-not (empty? (get tweet "link"))
                ;;  AnyLinkPreview)
              (m/Container
               .margin (.only m/EdgeInsets .top 10 .right 20)
               .child
               (m/Column
                .mainAxisAlignment m.MainAxisAlignment/spaceBetween
                .children
                [(icon-button/button
                  "assets/svgs/views.svg"
                  (str (+ (or (get tweet "comments_count") 0)
                          (or (get tweet "reshare_count") 0)
                          (or (get tweet "likes_count") 0)))
                  (fn [] nil)
                  theme/grey-color)
                 (icon-button/button
                  "assets/svgs/comment.svg"
                  (str (or (get tweet "comments_count") 0))
                  (fn [] nil)
                  theme/grey-color)
                 (icon-button/button
                  "assets/svgs/retweet.svg"
                  (str (or (get tweet "reshare_count") 0))
                  (fn []
                    (tweet-service/retweet ctx navigator (get tweet "id")))
                  (if (true? (get tweet "i_retweets"))
                    theme/red-color
                    theme/grey-color))
                 (like-button/LikeButton
                  .size 25
                  .onTap ^:async (fn [is-liked]
                                   (if (true? is-liked)
                                     (await (tweet-service/unfavorite-tweet ctx navigator (get tweet "id")))
                                     (await (tweet-service/favorite-tweet ctx navigator (get tweet "id")))))
                  .isLiked (or (get tweet "i_favorites") false)
                  .likeBuilder (fn [is-liked]
                                 (if is-liked
                                   (.asset svg/SvgPicture
                                           "assets/svgs/like_filled.svg"
                                           .color
                                           theme/red-color)
                                   (.asset svg/SvgPicture
                                           "assets/svgs/like_outlined.svg"
                                           .color
                                           theme/grey-color)))
                  .likeCountPadding (.only m/EdgeInsets .top 3)
                  .countPostion like-button.CountPostion/bottom
                  .likeCount (or (get tweet "favorites_count") 0)
                  .countBuilder (fn [likes-count is-liked text]
                                  (m/Padding .padding (.only m/EdgeInsets .top 2)
                                             .child (mgl/MongolText text
                                                                    .style
                                                                    (m/TextStyle .color (if is-liked
                                                                                          theme/red-color
                                                                                          theme/white-color)
                                                                                 .fontSize 16)))))
                 (m/IconButton
                  .onPressed (fn [] nil)
                  .icon (m/Icon (.share_outlined m/Icons) .size 25 .color theme/grey-color))]))
              (m/SizedBox .width 1)]))])
         (m/VerticalDivider .color theme/grey-color)])))))