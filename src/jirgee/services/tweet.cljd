(ns jirgee.services.tweet
  (:require
   [jirgee.states.global :as gs]
   [jirgee.common.utils :as utils]
   [jirgee.common.response :as response]

   ["package:flutter/widgets.dart" :as widgets]
   ["package:http/http.dart" :as http]
   ["dart:convert" :as convert]))

(defn ^:async get-tweets [ctx navigator info]
  (let [result (await
                (http/get (Uri/http utils/base-url "/api/tweets" info)
                          .headers {"Content-Type" "application/json; charset=UTF-8"
                                    "Authorization" (str "Token " (get @gs/state :user-token))}))]
    (response/response-message
     ctx
     result
     (fn [x]
       (let [limit (:limit info)
             offset (:offset info)
             has-more? (if (empty? limit)
                         (>= (count x) 20)
                         (>= (count x) limit))]
         (dart:core/print (str "get-tweets = " x))
         (swap! gs/state assoc :tweets {:has-more? has-more?
                                        :list
                                        (if (or (empty? offset) (zero? offset))
                                          x
                                          (concat (get-in @gs/state [:tweets :list])
                                                  x))}))))
    true))


;; (defn query-tweets-stream [ctx navigator info]
;;   (stream
;;    (map (fn [result]
;;           (dart:core/print "query success >>>>")
;;           :ok-token))
;;    (map (fn [[er st]]
;;           (utils/show-toast ctx "error when query_tweets")
;;           ;; (.pop navigator)
;;           :error-token))
;;    :as-values
;;    (.asStream (get-tweets ctx navigator info))))

(defn create-tweet [ctx navigator info]
  (let [result (await
                (http/post (Uri/http utils/base-url "/api/tweets" info)
                           .headers {"Content-Type" "application/json; charset=UTF-8"
                                     "Authorization" (str "Token " (get @gs/state :user-token))}
                           .body
                           (convert/jsonEncode
                            info)))]
    (response/response-message
     ctx
     result
     (fn [_]
       (get-tweets ctx navigator nil)))))

(defn delete-tweet [ctx navigator id]
  (let [result (await
                (http/delete (Uri/http utils/base-url "/api/tweets/" id)
                             .headers {"Content-Type" "application/json; charset=UTF-8"
                                       "Authorization" (str "Token " (get @gs/state :user-token))}))]
    (response/response-message
     ctx
     result
     (fn [_]
       (get-tweets ctx navigator nil)))))

;;
(defn ^:async get-replies [ctx navigator id info]
  (let [result (await
                (http/get (Uri/http utils/base-url (str "/api/tweets/" id "/replies") info)
                          .headers {"Content-Type" "application/json; charset=UTF-8"
                                    "Authorization" (str "Token " (get @gs/state :user-token))}))]
    (response/response-message
     ctx
     result
     (fn [x]
       (let [limit (:limit info)
             offset (:offset info)
             has-more? (if (empty? limit)
                         (>= (count x) 20)
                         (>= (count x) limit))]
         (swap! gs/state assoc :tweets {:has-more? has-more?
                                        :list
                                        (if (or (empty? offset) (zero? offset))
                                          x
                                          (concat (get-in @gs/state [:tweets :list])
                                                  x))}))))
    true))