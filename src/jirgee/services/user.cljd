(ns jirgee.services.user
  (:require
   [jirgee.services.shared-preferences :as sp]
   [jirgee.states.global :as gs]
   [jirgee.common.utils :as utils]
   [jirgee.common.response :as response]
   ["package:http/http.dart" :as http]
   ["dart:convert" :as convert]))

(defn get-token [ctx]
  (stream
   (map (fn [result]
          (swap! gs/state assoc :user-token result)
          :ok-token))
   (map (fn [[er st]]
          (utils/show-toast ctx "error get user-id")
          :error-token))
   :as-values
   (.asStream (sp/get-value {:type :string :key "user-token"}))))

(defn save-token [token]
  (sp/set-value {:type :string :key "user-token"
                 :value token})
  (swap! gs/state assoc :user-token token))

(defn delete-token []
  (sp/remove-value "user-token")
  (swap! gs/state assoc :user-token nil))

(defn save-info [info]
  (sp/set-value {:type :string :key "user-info"
                 :value (convert/jsonEncode info)})
  (swap! gs/state assoc :user-info info))

(defn delete-info []
  (sp/remove-value "user-info")
  (swap! gs/state assoc :user-info nil))

(defn get-token-and-info []
  (let [token (sp/get-value {:type :string :key "user-token"})
        info (sp/get-value {:type :string :key "user-info"})]
    (swap! gs/state assoc :user-token token)
    (swap! gs/state assoc :user-info token)))

(defn ^:async user-profile [ctx navigator info]
  (let [result (await
                (http/get (Uri/http utils/base-url "/api/profile/user_info" info)
                          .headers {"Content-Type" "application/json; charset=UTF-8"
                                    "Authorization" (str "Token " (get @gs/state :user-token))}))]
    (response/response-message
     ctx
     result
     (fn [x]
       (swap! gs/state assoc-in [:user :info] x)))
    true))