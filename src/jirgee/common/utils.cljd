(ns jirgee.common.utils
  (:require
   ["package:flutter/material.dart" :as m]
   ["package:mongol/mongol.dart" :as mgl]
   ["package:flutter_styled_toast/flutter_styled_toast.dart" :as styled-toast]
   ["package:image_picker/image_picker.dart" :as ip]
   ["dart:io" :as io]
   [jirgee.states.global :as gs]
   [cljd.flutter.alpha2 :as f]))

(def base-url "localhost:3002")

(defn show-toast [ctx msg]
  (styled-toast/showToastWidget
   (mgl/MongolText msg) .context ctx
   .reverseAnimation styled-toast.StyledToastAnimation/fade
   .animation styled-toast.StyledToastAnimation/fade
   .position styled-toast.StyledToastPosition/center))

(defn show-indicator [ctx]
  (m/showDialog
   .context ctx
   .barrierDismissible false
   .builder (f/build
             (f/widget
              :context ctx
              :get [m/Navigator]
              :bg-watcher ([{displayed? :indicator-displayed} gs/state]
                           (let [indicator-lock (:indicator-lock @gs/state)]
                             ;;  (dart:core/print (str "IN THE SHOU INDICATOR displayed? = " displayed? " lock= " indicator-lock))
                             (when (and (false? displayed?) (true? indicator-lock))
                              ;;  (dart:core/print "INDICATOR CLOSE, ONLY ONE TIME!")
                               (swap! gs/state assoc :indicator-lock false)
                               (.pop navigator))))
              (m/WillPopScope
               .onWillPop ^:async (fn [] false)
               .child (m/SimpleDialog
                       .children [(m/Center
                                   .child (m/Column
                                           .mainAxisSize m.MainAxisSize/min
                                           .children [(m/Padding .padding (.only m/EdgeInsets .left 16 .top 16 .right 16)
                                                                 .child (m/CircularProgressIndicator))
                                                      (m/Padding .padding (.all m/EdgeInsets 16)
                                                                 .child (m/Text "Loading..."))]))]))))))

(defn show-confirm-dialog [ctx msg callback]
  (m/showDialog
   .context ctx
   .builder (f/build
             (f/widget
              :context ctx
              :get [m/Navigator]
              (m/WillPopScope
               .onWillPop ^:async (fn [] false)
               .child
               (mgl/MongolAlertDialog
                .content (mgl/MongolText msg)
                .actions [(mgl/MongolTextButton .child (mgl/MongolText "No")
                                                .onPressed (fn [] (.pop navigator)))
                          (mgl/MongolTextButton .child (mgl/MongolText "Yes")
                                                .onPressed (fn []
                                                             (callback)
                                                             (.pop navigator)))]))))))
  
(defn pick-images []
  (let [picker (ip/ImagePicker)
        files (await (.pickMultiImage picker))]
    (-> files
        (.map (fn [^ip/XFile file]
                (io/File (.-path file))))
        (.toList))
    ;; (map #(io/File (.-path %)) files)
    ))